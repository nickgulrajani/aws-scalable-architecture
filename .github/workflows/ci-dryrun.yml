name: terraform-and-helm-dryrun

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  dryrun:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show repo tree
        run: |
          echo "== repo =="
          ls -la
          echo "== terraform =="
          ls -la terraform || true
          echo "== helm =="
          ls -la helm || true

      - name: Ensure jq
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Terraform fmt/validate
        run: |
          terraform -chdir=terraform init -backend=false
          terraform -chdir=terraform fmt -recursive
          terraform -chdir=terraform validate

      - name: Terraform plan (no apply, no costs)
        env:
          AWS_ACCESS_KEY_ID: dummy
          AWS_SECRET_ACCESS_KEY: dummy
          AWS_REGION: us-east-1
        run: |
          set -euo pipefail
          terraform -chdir=terraform init -backend=false
          terraform -chdir=terraform plan -refresh=false \
            -var-file=../tfvars/minimal.tfvars \
            -out=tfplan.binary
          echo "== human-readable plan (first 150 lines) =="
          terraform -chdir=terraform show tfplan.binary | sed -n '1,150p'
          test -f terraform/tfplan.binary && echo "✅ terraform/tfplan.binary exists"

      - name: Convert plan to JSON
        run: |
          set -euo pipefail
          terraform -chdir=terraform show -json tfplan.binary > tfplan.json
          ls -la tfplan.json
          jq '.resource_changes | length' tfplan.json

      - name: List created resource types (log aid)
        run: |
          set -euo pipefail
          echo "== Created resource types =="
          jq -r '[.resource_changes[]? | select(.change.actions|index("create")) | .type]
                 | group_by(.) | map({type: .[0], count: length})
                 | sort_by(-.count) | .[] | "\(.type): \(.count)"' tfplan.json || true

      - name: Policy gate — require tags on created resources
        run: |
          set -euo pipefail
          # Require these tag keys on any resource being CREATED
          REQUIRED='["Project","Environment","Owner","CostCenter"]'

          # jq program:
          # - ensure_obj(): coerce non-object to {}
          # - for each created resource: extract tags from .change.after (prefer tags_all, fallback to tags)
          # - compute which required keys are missing
          # - emit offenders with missing keys
          MISSING=$(
            jq -r --argjson req "$REQUIRED" '
              def ensure_obj(x): if (x|type)=="object" then x else {} end;

              [
                .resource_changes[]?
                | select(.change.actions | index("create"))
                | . as $rc
                | (ensure_obj($rc.change.after) | (.tags_all // .tags // {})) as $tags
                | {addr: $rc.address,
                   missing: [$req[] | select( ($tags[.] // null) == null )]
                  }
                | select(.missing | length > 0)
                | "\(.addr) missing: \(.missing|join(", "))"
              ] | .[]
            ' tfplan.json
          )

          if [ -n "$MISSING" ]; then
            echo "::error::Some created resources are missing required tags:"
            echo "$MISSING"
            exit 1
          else
            echo "✅ Tag policy passed (required tags present on created resources)."
          fi

      - name: Generate plan summary (Markdown)
        run: |
          set -euo pipefail
          ADDS=$(jq '[.resource_changes[]? | select(.change.actions|index("create"))] | length' tfplan.json)
          CHANGES=$(jq '[.resource_changes[]? | select(.change.actions|index("update"))] | length' tfplan.json)
          DESTROYS=$(jq '[.resource_changes[]? | select(.change.actions|index("delete"))] | length' tfplan.json)

          TOP=$(jq -r '
            [.resource_changes[]? | select(.change.actions|index("create")) | .type]
            | group_by(.) | map({type: .[0], count: length})
            | sort_by(-.count) | .[0:10]
            | (["Type","Creates"] as $h | $h), (.[] | [.type, (.count|tostring)])
            | @tsv' tfplan.json | column -t)

          {
            echo "# Terraform Plan Summary"
            echo
            echo "**Adds:** ${ADDS}  |  **Changes:** ${CHANGES}  |  **Destroys:** ${DESTROYS}"
            echo
            echo "## Top Created Resource Types"
            if [ -n "$TOP" ]; then echo; echo '```text'; echo "$TOP"; echo '```'; else echo; echo "_No new resources in plan._"; fi
            echo
            echo "## Helm Render"
            echo "Rendered Kubernetes manifests are attached as an artifact (helm/rendered.yaml)."
          } > plan-summary.md

          {
            echo "### Terraform Plan Summary"
            echo
            echo "- Adds: **${ADDS}**"
            echo "- Changes: **${CHANGES}**"
            echo "- Destroys: **${DESTROYS}**"
            echo
            echo "_See the **Artifacts**: tfplan.binary, tfplan.json, plan-summary.md, helm/rendered.yaml._"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Install Helm
        uses: azure/setup-helm@v4

      - name: Helm lint and template (render only)
        run: |
          set -euo pipefail
          helm lint helm/app
          helm template retail-app helm/app -f helm/app/values.yaml > helm/rendered.yaml
          echo "== Helm rendered preview =="
          head -n 50 helm/rendered.yaml
          test -f helm/rendered.yaml && echo "✅ helm/rendered.yaml exists"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dryrun-artifacts
          path: |
            terraform/tfplan.binary
            tfplan.json
            plan-summary.md
            helm/rendered.yaml
          if-no-files-found: error

      - name: Final tree
        run: |
          echo "== final repo tree =="
          ls -la
          echo "== terraform =="
          ls -la terraform
          echo "== helm =="
          ls -la helm

